{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Thermite, a CLI generator","text":"<p>What are the main things that this package provides.</p> <ul> <li>run any python function or class that has type annotations</li> <li>Use docstrings as the source of help</li> <li>not require changing the signature of existing functions to customize</li> <li>allow for classes as parameter annotations in functions that will be translated   into grouped options</li> <li>Allow for custom classes to be used as type annotations.</li> <li>provides the possibility to change the defaults in the CLI by using    YAML or JSON definitions (an easy way to use configuration files with CLIs)</li> <li>provides a plugin-interface to extend functionality (e.g. the help itself   is just a plugin)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>The package is available on pip, so can be installed with </p> <pre><code>pip install thermite\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>For any function, class or instance, just use </p> <p><pre><code>from thermite import run\nif __name__ == \"__main__\":\nrun(obj)\n</code></pre> and the package does the rest.</p>"},{"location":"#customization-options","title":"Customization options","text":"<p>The package allows plenty of different customization options, enabled  through the plugin system. More information is available on other pages of this documentation.</p>"},{"location":"#examples-of-common-customizations","title":"Examples of common customizations","text":"<p>For various examples on how to customize the CLI, please see the Table of Contents on the side.</p>"},{"location":"#bash-completion","title":"Bash completion","text":"<p>Not yet implemented. Plan is to have a JSON specification of the core of the commands. This will then be run by bash using only minimal dependencies so that loading the completion is fast, even if the CLI underneath can be slow due to heavy dependencies (e.g. pytorch).</p>"},{"location":"#other-cli-generators","title":"Other CLI generators","text":"<p>There are already lots of CLI generators for python, many with lots of  usage and great functionality that have inspired this package. Check them out.</p> <ul> <li>argparse</li> <li>click</li> <li>typer</li> <li>fire</li> <li>docopt</li> </ul>"},{"location":"classes_events/","title":"The class system","text":"<p><pre><code>classDiagram\n    Command &lt;-- ParameterGroup\n    ParameterGroup &lt;-- Parameter\n\n    Parameter &lt;|-- Option\n    Parameter &lt;|-- Argument\n\n    Argument: +Type res_type\n    Argument: +CLIArgConverterBase type_converter\n    Argument &lt;-- CLIArgConverterBase\n\n    Option: +List[TriggerProcessor]\n\n    Option &lt;-- TriggerProcessor\n\n    TriggerProcessor &lt;|-- ConstantTriggerProcessor\n    TriggerProcessor &lt;|-- ConvertTriggerProcessor\n    TriggerProcessor &lt;|-- MultiConvertTriggerProcessor\n\n    ConvertTriggerProcessor: +CLIArgConverterBase type_converter\n    ConvertTriggerProcessor &lt;-- CLIArgConverterBase\n    MultiConvertTriggerProcessor: +CLIArgConverterBase type_converter\n    MultiConvertTriggerProcessor &lt;-- CLIArgConverterBase\n\n\n    ObjSignature &lt;-- ParameterSignature\n    ObjSignature: +Dict[str, ParameterSignature] params\n    class ParameterSignature</code></pre> In this diagram the relationships between the most important classes are listed. Depending on where the customization is needed, it is possible  to manipulate the automatic creation of the CLI at various places, which is enabled through the event callback system.</p>"},{"location":"classes_events/#the-callback-systems-for-events","title":"The callback systems for events","text":"<p>During creation of the CLI, at several places in the code callbacks are being executed that are associated with certain events.</p> <p>The currently supported events are:</p> <ul> <li>START_ARGS_PRE_PROCESS: This event is being called after the first command   object is created, but before any input arguments have yet been processed. This   event can be used to, e.g., globally react to certain options   that can occur anywhere among the input arguments</li> <li>SIG_EXTRACT: This is being called after the object signature is extracted for   an object (e.g. class or function) but before this object is parsed into a    ParameterGroup or Command. This can be useful when the default annotation    of a function causes errors. Also, all information extracted from an obj   flows through this event, so any adjustments to documentation can be done here.</li> <li>PG_POST_CREATE: Called after a ParameterGroup was created from the object   signature. This is done for commands as well as nested classes that are parameters   themselves.</li> <li>CMD_POST_CREATE: Called after a Command was created, but before   any input arguments are processed. </li> <li>CMD_POST_PROCESS: Called for Command after the input arguments are    processed but before the subcommands are being called.</li> </ul> <p>Using these events, a lot of customization is possible. In addition,  custom callbacks at the CLI level can be registered.</p> <p>For convenience it is also easy to specify that these events are only used for certain objects. Examples on how to use this feature can be found below.</p>"},{"location":"cli_callbacks/","title":"CLI callbacks","text":""},{"location":"cli_callbacks/#callbacks-at-the-cli-level","title":"Callbacks at the CLI level","text":"<p>Callbacks at the CLI level are used to customize behavior based on user input that is not directly related to the object for which the CLI is being created. Typical use cases for this are:</p> <ul> <li>Showing the help for the current command</li> <li>Customizing default values based on JSON or YAML input files</li> <li>Creating shell-completion</li> <li>A 'no-op' callback, that does nothing but is useful to work as an input    delimiter for variable lengh options or arguments</li> </ul> <p>In fact, all of these provided in this library (including the help itself) is written only using public interfaces. So if you don't like the look of the current help - you can just write your own :).</p> <p>These callbacks can be specified to either work for the top-level command and all subcommands or only for the top-level command. Using the event-system above it is of course also possible to specify callbacks that only work for specific  subcommands.</p>"},{"location":"references/","title":"Documentation for Thermite","text":"<p>A package for easily creating CLIs.</p>"},{"location":"references/#thermite.CliParamKind","title":"CliParamKind","text":"<p>         Bases: <code>Enum</code></p>"},{"location":"references/#thermite.signatures.CliParamKind.OPTION","title":"OPTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OPTION = 'OPTION'\n</code></pre>"},{"location":"references/#thermite.signatures.CliParamKind.ARGUMENT","title":"ARGUMENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARGUMENT = 'ARGUMENT'\n</code></pre>"},{"location":"references/#thermite.Event","title":"Event","text":"<p>         Bases: <code>Enum</code></p>"},{"location":"references/#thermite.config.Event.START_ARGS_PRE_PROCESS","title":"START_ARGS_PRE_PROCESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>START_ARGS_PRE_PROCESS = 'START_ARGS_PRE_PROCESS'\n</code></pre>"},{"location":"references/#thermite.config.Event.SIG_EXTRACT","title":"SIG_EXTRACT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SIG_EXTRACT = 'SIG_EXTRACT'\n</code></pre>"},{"location":"references/#thermite.config.Event.CMD_POST_CREATE","title":"CMD_POST_CREATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CMD_POST_CREATE = 'CMD_POST_CREATE'\n</code></pre>"},{"location":"references/#thermite.config.Event.CMD_POST_PROCESS","title":"CMD_POST_PROCESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CMD_POST_PROCESS = 'CMD_POST_PROCESS'\n</code></pre>"},{"location":"references/#thermite.config.Event.PG_POST_CREATE","title":"PG_POST_CREATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PG_POST_CREATE = 'PG_POST_CREATE'\n</code></pre>"},{"location":"references/#thermite.config.Event.CMD_FINISH","title":"CMD_FINISH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CMD_FINISH = 'CMD_FINISH'\n</code></pre>"},{"location":"references/#thermite.ParameterSignature","title":"ParameterSignature","text":""},{"location":"references/#thermite.signatures.ParameterSignature.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"references/#thermite.signatures.ParameterSignature.python_kind","title":"python_kind  <code>instance-attribute</code>","text":"<pre><code>python_kind: inspect._ParameterKind\n</code></pre>"},{"location":"references/#thermite.signatures.ParameterSignature.cli_kind","title":"cli_kind  <code>instance-attribute</code>","text":"<pre><code>cli_kind: CliParamKind\n</code></pre>"},{"location":"references/#thermite.signatures.ParameterSignature.descr","title":"descr  <code>instance-attribute</code>","text":"<pre><code>descr: Optional[str]\n</code></pre>"},{"location":"references/#thermite.signatures.ParameterSignature.default_value","title":"default_value  <code>instance-attribute</code>","text":"<pre><code>default_value: Any\n</code></pre>"},{"location":"references/#thermite.signatures.ParameterSignature.annot","title":"annot  <code>instance-attribute</code>","text":"<pre><code>annot: Type\n</code></pre>"},{"location":"references/#thermite.ParameterGroup","title":"ParameterGroup","text":"<p>         Bases: <code>MutableMapping</code></p>"},{"location":"references/#thermite.parameters.group.ParameterGroup.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = ''\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.short_descr","title":"short_descr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>short_descr: Optional[str] = None\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.long_descr","title":"long_descr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>long_descr: Optional[str] = None\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.return_annot","title":"return_annot  <code>instance-attribute</code>","text":"<pre><code>return_annot: Type\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.obj","title":"obj  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>obj: Any = None\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.default_value","title":"default_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_value: Any = field(default=Ellipsis)\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.python_kind","title":"python_kind  <code>instance-attribute</code>","text":"<pre><code>python_kind: Optional[inspect._ParameterKind]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.params","title":"params  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>params: Dict[str, Union[Parameter, ParameterGroup]] = field(\nfactory=dict\n)\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.posargs","title":"posargs  <code>property</code>","text":"<pre><code>posargs: List[Union[Parameter, ParameterGroup]]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.varposargs","title":"varposargs  <code>property</code>","text":"<pre><code>varposargs: List[Union[Parameter, ParameterGroup]]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.kwargs","title":"kwargs  <code>property</code>","text":"<pre><code>kwargs: Dict[str, Union[Parameter, ParameterGroup]]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.py_args_values","title":"py_args_values  <code>property</code>","text":"<pre><code>py_args_values: Tuple[Any, ...]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.py_args_values_with_excs","title":"py_args_values_with_excs  <code>property</code>","text":"<pre><code>py_args_values_with_excs: Tuple[Any, ...]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.py_kwargs_values","title":"py_kwargs_values  <code>property</code>","text":"<pre><code>py_kwargs_values: Dict[str, Any]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.py_kwargs_values_with_excs","title":"py_kwargs_values_with_excs  <code>property</code>","text":"<pre><code>py_kwargs_values_with_excs: Dict[str, Any]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.unset","title":"unset  <code>property</code>","text":"<pre><code>unset: bool\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.is_required","title":"is_required  <code>property</code>","text":"<pre><code>is_required: bool\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.value","title":"value  <code>property</code>","text":"<pre><code>value: Any\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.cli_args","title":"cli_args  <code>property</code>","text":"<pre><code>cli_args: Dict[str, Argument]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.cli_opts","title":"cli_opts  <code>property</code>","text":"<pre><code>cli_opts: Dict[str, Option]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.cli_pgs","title":"cli_pgs  <code>property</code>","text":"<pre><code>cli_pgs: Dict[str, ParameterGroup]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.cli_opts_recursive","title":"cli_opts_recursive  <code>property</code>","text":"<pre><code>cli_opts_recursive: Dict[str, Option]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.cli_args_recursive","title":"cli_args_recursive  <code>property</code>","text":"<pre><code>cli_args_recursive: Dict[str, Argument]\n</code></pre>"},{"location":"references/#thermite.parameters.group.ParameterGroup.process","title":"process","text":"<pre><code>process(input_args)\n</code></pre> Source code in <code>thermite/parameters/group.py</code> <pre><code>def process(self, input_args: Sequence[str]) -&gt; Sequence[str]:\nif len(input_args) == 0:\nreturn []\nif input_args[0].startswith(\"-\"):\nopts_by_trigger = self.cli_opts_recursive\nif input_args[0] in opts_by_trigger:\nself._num_bound += 1\nopt = opts_by_trigger[input_args[0]]\nbind_res = opt.process(input_args)\nreturn bind_res\nelse:\nraise TriggerError(f\"No option with trigger {input_args[0]}\")\nelse:\nfor argument in self.cli_args_recursive.values():\nif argument.unset:\nself._num_bound += 1\nargs_use, args_remain = split_args_by_nargs(\ninput_args, argument.type_converter.num_req_args\n)\nargument.process(args_use)\nreturn args_remain\nreturn input_args\n</code></pre>"},{"location":"references/#thermite.ConstantTriggerProcessor","title":"ConstantTriggerProcessor","text":"<p>         Bases: <code>TriggerProcessor</code></p>"},{"location":"references/#thermite.parameters.processors.ConstantTriggerProcessor.constant","title":"constant  <code>instance-attribute</code>","text":"<pre><code>constant: Any\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConstantTriggerProcessor.bind","title":"bind","text":"<pre><code>bind(args)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def bind(self, args: Sequence[str]) -&gt; Sequence[str]:\nif len(args) == 0:\nraise TriggerError(\"A trigger is expected.\")\nif args[0] not in self.triggers:\nraise TriggerError(f\"Trigger {args[0]} not an allowed trigger.\")\nreturn args[1:]\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConstantTriggerProcessor.process","title":"process","text":"<pre><code>process(value)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def process(self, value: Any) -&gt; Any:\ndel value\nreturn self.constant\n</code></pre>"},{"location":"references/#thermite.ObjSignature","title":"ObjSignature","text":""},{"location":"references/#thermite.signatures.ObjSignature.short_descr","title":"short_descr  <code>instance-attribute</code>","text":"<pre><code>short_descr: Optional[str]\n</code></pre>"},{"location":"references/#thermite.signatures.ObjSignature.long_descr","title":"long_descr  <code>instance-attribute</code>","text":"<pre><code>long_descr: Optional[str]\n</code></pre>"},{"location":"references/#thermite.signatures.ObjSignature.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params: Dict[str, ParameterSignature]\n</code></pre>"},{"location":"references/#thermite.signatures.ObjSignature.return_annot","title":"return_annot  <code>instance-attribute</code>","text":"<pre><code>return_annot: Type\n</code></pre>"},{"location":"references/#thermite.Parameter","title":"Parameter","text":"<p>         Bases: <code>ABC</code>, <code>ParameterSignature</code></p> <p>Base class for Parameters.</p>"},{"location":"references/#thermite.parameters.base.Parameter.unset","title":"unset  <code>property</code>","text":"<pre><code>unset: bool\n</code></pre>"},{"location":"references/#thermite.parameters.base.Parameter.is_required","title":"is_required  <code>property</code>","text":"<pre><code>is_required: bool\n</code></pre>"},{"location":"references/#thermite.parameters.base.Parameter.value","title":"value  <code>property</code>","text":"<pre><code>value: Any\n</code></pre>"},{"location":"references/#thermite.parameters.base.Parameter.process","title":"process  <code>abstractmethod</code>","text":"<pre><code>process(args)\n</code></pre> <p>Get a list of arguments and returns any unused ones.</p> Source code in <code>thermite/parameters/base.py</code> <pre><code>@abstractmethod\ndef process(self, args: Sequence[str]) -&gt; Sequence[str]:\n\"\"\"Get a list of arguments and returns any unused ones.\"\"\"\n...\n</code></pre>"},{"location":"references/#thermite.CliCallback","title":"CliCallback","text":""},{"location":"references/#thermite.command.CliCallback.callback","title":"callback  <code>instance-attribute</code>","text":"<pre><code>callback: Callable\n</code></pre>"},{"location":"references/#thermite.command.CliCallback.triggers","title":"triggers  <code>instance-attribute</code>","text":"<pre><code>triggers: List[str]\n</code></pre>"},{"location":"references/#thermite.command.CliCallback.descr","title":"descr  <code>instance-attribute</code>","text":"<pre><code>descr: str\n</code></pre>"},{"location":"references/#thermite.command.CliCallback.num_req_args","title":"num_req_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_req_args: Union[int, slice] = 0\n</code></pre>"},{"location":"references/#thermite.command.CliCallback.execute","title":"execute","text":"<pre><code>execute(cmd, args)\n</code></pre> Source code in <code>thermite/command.py</code> <pre><code>def execute(self, cmd: \"Command\", args: Sequence[str]) -&gt; Optional[Sequence[str]]:\nif args[0] in self.triggers:\nnum_args_use = args_used(\nnum_offered=len(args) - 1, num_req=self.num_req_args\n)\nself.callback(cmd, *args[1 : (1 + num_args_use)])\nreturn args[(1 + num_args_use) :]\nelse:\nraise Exception(\"Callback was raised without appropriate trigger.\")\n</code></pre>"},{"location":"references/#thermite.ConvertTriggerProcessor","title":"ConvertTriggerProcessor","text":"<p>         Bases: <code>TriggerProcessor</code></p>"},{"location":"references/#thermite.parameters.processors.ConvertTriggerProcessor.type_converter","title":"type_converter  <code>instance-attribute</code>","text":"<pre><code>type_converter: CLIArgConverterBase\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConvertTriggerProcessor.bound_args","title":"bound_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bound_args: Sequence[str] = field(factory=list, init=False)\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConvertTriggerProcessor.allow_replace","title":"allow_replace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_replace: bool = False\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConvertTriggerProcessor.bind","title":"bind","text":"<pre><code>bind(args)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def bind(self, args: Sequence[str]) -&gt; Sequence[str]:\nif len(args) == 0:\nraise TriggerError(\"A trigger is expected.\")\nif args[0] not in self.triggers:\nraise TriggerError(f\"Trigger {args[0]} not an allowed trigger.\")\nbound_args, ret_args = split_args_by_nargs(\nargs[1:], num_req_args=self.type_converter.num_req_args\n)\nself.bound_args = bound_args\nreturn ret_args\n</code></pre>"},{"location":"references/#thermite.parameters.processors.ConvertTriggerProcessor.process","title":"process","text":"<pre><code>process(value)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def process(self, value: Any) -&gt; Any:\nif value != ... and not self.allow_replace:\nraise TriggerError(\"Trigger already used once.\")\nreturn self.type_converter.convert(self.bound_args)\n</code></pre>"},{"location":"references/#thermite.Config","title":"Config","text":""},{"location":"references/#thermite.config.Config.cli_callbacks","title":"cli_callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cli_callbacks: List[CliCallback] = field(factory=list)\n</code></pre>"},{"location":"references/#thermite.config.Config.cli_callbacks_top_level","title":"cli_callbacks_top_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cli_callbacks_top_level: List[CliCallback] = field(\nfactory=list\n)\n</code></pre>"},{"location":"references/#thermite.config.Config.cli_args_store","title":"cli_args_store  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cli_args_store: CLIArgConverterStore = field(\nfactory=partial(CLIArgConverterStore, add_defaults=True)\n)\n</code></pre>"},{"location":"references/#thermite.config.Config.event_callbacks","title":"event_callbacks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_callbacks: EventCallbacks = field(\nfactory=partial(EventCallbacks, add_defaults=True)\n)\n</code></pre>"},{"location":"references/#thermite.config.Config.SplitterClass","title":"SplitterClass  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SplitterClass: Type = EagerCliArgsSplitter\n</code></pre>"},{"location":"references/#thermite.config.Config.add_cli_callback","title":"add_cli_callback","text":"<pre><code>add_cli_callback(cb)\n</code></pre> Source code in <code>thermite/config.py</code> <pre><code>def add_cli_callback(self, cb: \"CliCallback\"):\nself.cli_callbacks.append(cb)\n</code></pre>"},{"location":"references/#thermite.config.Config.get_event_cbs","title":"get_event_cbs","text":"<pre><code>get_event_cbs(event)\n</code></pre> Source code in <code>thermite/config.py</code> <pre><code>def get_event_cbs(self, event: Union[str, Event]) -&gt; List[Callable]:\nreturn self.event_callbacks.event_cb_dict[event]\n</code></pre>"},{"location":"references/#thermite.config.Config.event_cb_deco","title":"event_cb_deco","text":"<pre><code>event_cb_deco(event, obj=None)\n</code></pre> Source code in <code>thermite/config.py</code> <pre><code>def event_cb_deco(self, event: Union[str, Event], obj: Any = None):\ndef add_event_cb_inner(cb: Callable):\nself.event_callbacks.add_event_cb(event=event, cb=cb, obj=obj)\nreturn cb\nreturn add_event_cb_inner\n</code></pre>"},{"location":"references/#thermite.MultiConvertTriggerProcessor","title":"MultiConvertTriggerProcessor","text":"<p>         Bases: <code>TriggerProcessor</code></p>"},{"location":"references/#thermite.parameters.processors.MultiConvertTriggerProcessor.type_converter","title":"type_converter  <code>instance-attribute</code>","text":"<pre><code>type_converter: CLIArgConverterBase\n</code></pre>"},{"location":"references/#thermite.parameters.processors.MultiConvertTriggerProcessor.bound_args","title":"bound_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bound_args: Sequence[str] = field(factory=list, init=False)\n</code></pre>"},{"location":"references/#thermite.parameters.processors.MultiConvertTriggerProcessor.bind","title":"bind","text":"<pre><code>bind(args)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def bind(self, args: Sequence[str]) -&gt; Sequence[str]:\nif len(args) == 0:\nraise TriggerError(\"A trigger is expected.\")\nif args[0] not in self.triggers:\nraise TriggerError(f\"Trigger {args[0]} not an allowed trigger.\")\nbound_args, ret_args = split_args_by_nargs(\nargs[1:], num_req_args=self.type_converter.num_req_args\n)\nself.bound_args = bound_args\nreturn ret_args\n</code></pre>"},{"location":"references/#thermite.parameters.processors.MultiConvertTriggerProcessor.process","title":"process","text":"<pre><code>process(value)\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def process(self, value: Any) -&gt; Any:\nappend_val = self.type_converter.convert(self.bound_args)\nif not isinstance(value, list):\nreturn [append_val]\nelse:\nvalue = value.copy()\nvalue.append(append_val)\nreturn value\n</code></pre>"},{"location":"references/#thermite.parameters.processors.MultiConvertTriggerProcessor.to_convert_trigger_processor","title":"to_convert_trigger_processor","text":"<pre><code>to_convert_trigger_processor()\n</code></pre> Source code in <code>thermite/parameters/processors.py</code> <pre><code>def to_convert_trigger_processor(self) -&gt; ConvertTriggerProcessor:\ninner_converter = self.type_converter\nif not isinstance(inner_converter.num_req_args, int):\nraise Exception(\n\"Inner type converter needs ask for constant number \" \"of arguments\"\n)\nreturn ConvertTriggerProcessor(\ntype_converter=ListCLIArgConverter(\ntarget_type=List[inner_converter.target_type],  # type: ignore\ninner_converter=inner_converter,\n),\ntriggers=self.triggers,\nres_type=self.res_type,\n)\n</code></pre>"},{"location":"references/#thermite.Option","title":"Option","text":"<p>         Bases: <code>Parameter</code></p> <p>Base class for Options.</p>"},{"location":"references/#thermite.parameters.base.Option.processors","title":"processors  <code>instance-attribute</code>","text":"<pre><code>processors: List[TriggerProcessor]\n</code></pre>"},{"location":"references/#thermite.parameters.base.Option.final_triggers","title":"final_triggers  <code>property</code>","text":"<pre><code>final_triggers: Sequence[str]\n</code></pre>"},{"location":"references/#thermite.parameters.base.Option.process","title":"process","text":"<pre><code>process(args)\n</code></pre> <p>Implement of general argument processing.</p> Source code in <code>thermite/parameters/base.py</code> <pre><code>def process(self, args: Sequence[str]) -&gt; Sequence[str]:\n\"\"\"Implement of general argument processing.\"\"\"\ntrigger_by_processor = self._final_trigger_by_processor\nif len(args) == 0:\nraise TriggerError(\"A trigger is expected for options.\")\nif args[0] not in trigger_by_processor:\nraise TriggerError(f\"Option {args[0]} not registered as a trigger.\")\nprocessor = trigger_by_processor[args[0]]\ntry:\nret_args = processor.bind(args)\nexcept Exception as e:\nself._exceptions.append(e)\nreturn []\ntry:\nself._value = processor.process(self._value)\nexcept Exception as e:\nself._exceptions.append(e)\nreturn ret_args\n</code></pre>"},{"location":"references/#thermite.parameters.base.Option.to_argument","title":"to_argument","text":"<pre><code>to_argument()\n</code></pre> Source code in <code>thermite/parameters/base.py</code> <pre><code>def to_argument(self) -&gt; \"Argument\":\n# to convert it to an argument, we need a processor of subclass\n# ConvertTriggerProcessor\ntype_converter = None\nfor proc in self.processors:\nif isinstance(proc, MultiConvertTriggerProcessor):\ntype_converter = proc.to_convert_trigger_processor().type_converter\nres_type = proc.res_type\nbreak\nelif isinstance(proc, ConvertTriggerProcessor):\ntype_converter = proc.type_converter  # type: ignore\nres_type = proc.res_type\nbreak\nif type_converter is None:\nraise Exception(\"Can't convert option to argument\")\nres = Argument(\nname=self.name,\npython_kind=self.python_kind,\ncli_kind=self.cli_kind,\ndescr=self.descr,\ndefault_value=self.default_value,\nannot=self.annot,\nres_type=res_type,\ntype_converter=type_converter,\n)\nreturn res\n</code></pre>"},{"location":"references/#thermite.BasicCLIArgConverter","title":"BasicCLIArgConverter","text":"<p>         Bases: <code>CLIArgConverterBase</code></p>"},{"location":"references/#thermite.type_converters.BasicCLIArgConverter.supported_type","title":"supported_type  <code>instance-attribute</code>","text":"<pre><code>supported_type: Type\n</code></pre>"},{"location":"references/#thermite.type_converters.BasicCLIArgConverter.conv_func","title":"conv_func  <code>instance-attribute</code>","text":"<pre><code>conv_func: Callable\n</code></pre>"},{"location":"references/#thermite.type_converters.BasicCLIArgConverter.target_type","title":"target_type  <code>instance-attribute</code>","text":"<pre><code>target_type: Type\n</code></pre>"},{"location":"references/#thermite.type_converters.BasicCLIArgConverter.factory","title":"factory  <code>classmethod</code>","text":"<pre><code>factory(target_type, store, supported_type, conv_func=None)\n</code></pre> Source code in <code>thermite/type_converters.py</code> <pre><code>@classmethod\ndef factory(\ncls,\ntarget_type: Type,\nstore: \"CLIArgConverterStore\",\nsupported_type: Type,\nconv_func: Optional[Callable] = None,\n):\ndel store\nif conv_func is None:\nconv_func = supported_type\nreturn cls(\nsupported_type=supported_type, target_type=target_type, conv_func=conv_func\n)\n</code></pre>"},{"location":"references/#thermite.process_function_to_obj_signature","title":"process_function_to_obj_signature","text":"<pre><code>process_function_to_obj_signature(func)\n</code></pre> Source code in <code>thermite/signatures.py</code> <pre><code>def process_function_to_obj_signature(func: Callable) -&gt; ObjSignature:\ndescriptions = extract_descriptions(func)\nfunc_sig = inspect.signature(func)\nreturn ObjSignature(\nparams=create_params_sig_dict(func_sig.parameters, descriptions.args_doc_dict),\nreturn_annot=func_sig.return_annotation,\nshort_descr=descriptions.short_descr,\nlong_descr=descriptions.long_descr,\n)\n</code></pre>"},{"location":"references/#thermite.process_class_to_obj_signature","title":"process_class_to_obj_signature","text":"<pre><code>process_class_to_obj_signature(klass)\n</code></pre> Source code in <code>thermite/signatures.py</code> <pre><code>def process_class_to_obj_signature(klass: Type) -&gt; ObjSignature:\ndescriptions = extract_descriptions(klass)\nif klass.__init__ != object.__init__:\ninit_sig = inspect.signature(klass.__init__)\nreturn ObjSignature(\nparams=create_params_sig_dict(\ninit_sig.parameters, descriptions.args_doc_dict\n),\nreturn_annot=klass,\nshort_descr=descriptions.short_descr,\nlong_descr=descriptions.long_descr,\n)\nelse:\nreturn process_instance_to_obj_signature(klass())\n</code></pre>"},{"location":"references/#thermite.process_instance_to_obj_signature","title":"process_instance_to_obj_signature","text":"<pre><code>process_instance_to_obj_signature(obj)\n</code></pre> Source code in <code>thermite/signatures.py</code> <pre><code>def process_instance_to_obj_signature(obj: Any) -&gt; ObjSignature:\n# get the documentation\nklass_doc = inspect.getdoc(obj.__class__)\nif klass_doc is not None:\nklass_doc_parsed = parse(klass_doc)\nshort_descr = klass_doc_parsed.short_description\nlong_descr = klass_doc_parsed.long_description\nelse:\nshort_descr = None\nlong_descr = None\n# as it is an instance, there are no things to call\nreturn ObjSignature(\nparams={},\nreturn_annot=obj.__class__,\nshort_descr=short_descr,\nlong_descr=long_descr,\n)\n</code></pre>"},{"location":"examples/advanced/","title":"Transferring parameters between functions","text":"<p>Show a generic wrapper class, for using a function that works for a single 'file' to adapt it to work on directories of files, using automatically the information on options from the original file</p> <p>Transferring paramters from one function to another</p> HelpOutputCode <pre><code>&gt; python examples/adv/param_transfer.py --help\nUsage: examples/adv/param_transfer.py [OPTIONS]\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --input-dir     Path                                                       \u2502\n\u2502   --param1        str                                                        \u2502\n\u2502   --param2        float                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>&gt; python examples/adv/param_transfer.py --input-dir foo --param1 bar --param2 0.5\ninput_dir: foo\nkwargs: {'param1': 'bar', 'param2': 0.5}\n</code></pre> <pre><code>\"\"\"\nExample of parameter transfer\n\"\"\"\nfrom pathlib import Path\nfrom typing import Any\nfrom thermite import Config, Event, ObjSignature, process_function_to_obj_signature, run\ndef process_file(input_file: Path, param1: str, param2: float):\n...\ndef process_dir(input_dir: Path, **kwargs):\nprint(f\"input_dir: {input_dir}\")\nprint(f\"kwargs: {kwargs}\")\n# for input_file in input_dir.glob(\"*\"):\n#    process_file(input_file, **kwargs)\ndef transfer_params(sig: ObjSignature, _: Any):\nproc_file_sig = process_function_to_obj_signature(process_file)\ndel sig.params[\"kwargs\"]\ndel proc_file_sig.params[\"input_file\"]\nsig.params.update(proc_file_sig.params)\nreturn sig\nif __name__ == \"__main__\":\nconfig = Config()\nconfig.event_cb_deco(Event.SIG_EXTRACT, process_dir)(transfer_params)\nrun(process_dir, config=config)\n</code></pre>"},{"location":"examples/advanced/#using-json-configuration-files","title":"Using JSON configuration files","text":"<p>We can also use a YAML or JSON file to dynamically set the defaults  of the CLI. This can be useful for complex data science projects in order  not to have to hardcode defaults. </p> <p>Setting defaults using a config file</p> HelpConfig fileCode <pre><code>&gt; python examples/adv/config_file.py --defaults-file examples/adv/config_file.yml#version1 --help\nInitialize self.  See help(type(self)) for accurate signature.\n\nUsage: examples/adv/config_file.py [OPTIONS] SUBCOMMAND\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --defaults-file     Read defaults from file                                \u2502\n\u2502   --help              Display the help message                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --global-param1     Path     a_path                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 cmd1  First subcommand                                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>version1:\n  opts:\n    - [\"--global-param1\", \"a_path\"]\n  cmds: \n    example1:\n      opts:\n        - [\"--param1\", \"foo\"]\nversion2:\n  cmds: \n    example1:\n      opts:\n        - [\"--param1\", \"bar\"]\n</code></pre> <pre><code>\"\"\"\nCLI with subcommands.\n\"\"\"\nfrom pathlib import Path\nfrom typing import List\nfrom thermite import run\nfrom thermite.config import Config\nfrom thermite.plugins.default_defs import defaults_cli_callback\nclass Subcommands:\ndef __init__(self, global_param1: Path):\npass\ndef cmd1(self, param1: str):\n\"\"\"First subcommand\"\"\"\npass\nif __name__ == \"__main__\":\nconfig = Config(cli_callbacks=[defaults_cli_callback])\nrun(Subcommands, config=config)\n</code></pre> <p>While not available yet, in a very similar way plugins can be created that use  environment variables this way as well.</p>"},{"location":"examples/basic/","title":"Basics","text":""},{"location":"examples/basic/#changing-help","title":"Changing help","text":"<p>A very simple example on how to change the help using the event callbacks  is as follows:</p> <p>Adjusting the help documentation</p> HelpCode <pre><code>&gt; python examples/basics/adjust_help.py --help\nA simple example\n\nUsage: examples/basics/adjust_help.py [OPTIONS]\n\nA long description for the command.\nMaybe over several lines.\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --param1     str            Description for parameter 1.                   \u2502\n\u2502   --param2     float          Description for parameter 2.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>\"\"\"\nVery simple example of a CLI\n\"\"\"\nfrom typing import Any\nfrom thermite import Config, Event, ObjSignature, run\nconfig = Config()\ndef simple(param1: str, param2: float):\nprint(f\"param1: {param1}\")\nprint(f\"param2: {param2}\")\n@config.event_cb_deco(Event.SIG_EXTRACT, simple)\ndef add_help_cb(sig: ObjSignature, _: Any):\nsig.short_descr = \"A simple example\"\nsig.long_descr = \"\"\"A long description for the command.\n                        Maybe over several lines.\n                     \"\"\"\nsig.params[\"param1\"].descr = \"Description for parameter 1.\"\nsig.params[\"param2\"].descr = \"Description for parameter 2.\"\nreturn sig\nif __name__ == \"__main__\":\nrun(simple, config=config)\n</code></pre>"},{"location":"examples/basic/#adapting-options-to-arguments","title":"Adapting options to arguments","text":"<p>Similarly we can switch options to arguments:</p> <p>Switching options to arguments</p> HelpCode <pre><code>&gt; python examples/basics/opts_to_args.py --help\nA simple example\n\nUsage: examples/basics/opts_to_args.py [OPTIONS] ARGS\n\nA long description for the command.\nMaybe over several lines.\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   param1     str          Description for parameter 1.                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --param2     float          Description for parameter 2.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>\"\"\"\nVery simple example of a CLI\n\"\"\"\nfrom typing import Any\nfrom thermite import CliParamKind, Config, Event, ObjSignature, run\nconfig = Config()\ndef simple(param1: str, param2: float):\nprint(f\"param1: {param1}\")\nprint(f\"param2: {param2}\")\n@config.event_cb_deco(Event.SIG_EXTRACT, simple)\ndef add_help_cb(sig: ObjSignature, _: Any):\nsig.short_descr = \"A simple example\"\nsig.long_descr = \"\"\"A long description for the command.\n                        Maybe over several lines.\n                     \"\"\"\nsig.params[\"param1\"].descr = \"Description for parameter 1.\"\nsig.params[\"param2\"].descr = \"Description for parameter 2.\"\nsig.params[\"param1\"].cli_kind = CliParamKind.ARGUMENT\nreturn sig\nif __name__ == \"__main__\":\nrun(simple, config=config)\n</code></pre>"},{"location":"examples/dataclasses/","title":"Dataclasses as function parameters","text":""},{"location":"examples/dataclasses/#basic-version","title":"Basic version","text":"<p>Basic use of classes as parameters</p> HelpCode <pre><code>&gt; python examples/dataclasses/basic.py --help\nUsage: examples/dataclasses/basic.py\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u256d\u2500 x \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 Method generated by attrs for class Fraction.                            \u2502 \u2502\n\u2502 \u2502   --x-numerator       int                                                \u2502 \u2502\n\u2502 \u2502   --x-denominator     int                                                \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>from attrs import mutable\nfrom thermite import run\n@mutable\nclass Fraction:\nnumerator: int\ndenominator: int\ndef fraction(x: Fraction):\nprint(f\"{x.numerator}/{x.denominator} = {x.numerator/x.denominator}\")\nif __name__ == \"__main__\":\nrun(fraction)\n</code></pre>"},{"location":"examples/dataclasses/#as-arguments","title":"As arguments","text":"<p>All options as arguments</p> HelpCode <pre><code>&gt; python examples/dataclasses/with_arguments.py --help\nUsage: examples/dataclasses/with_arguments.py\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   numerator       int                                                        \u2502\n\u2502   denominator     int                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>from typing import Any\nfrom attrs import mutable\nfrom thermite import CliParamKind, Config, Event, ObjSignature, run\nconfig = Config()\n@mutable\nclass Fraction:\nnumerator: int\ndenominator: int\ndef fraction(x: Fraction):\nprint(f\"{x.numerator}/{x.denominator} = {x.numerator/x.denominator}\")\n@config.event_cb_deco(Event.SIG_EXTRACT, Fraction)\ndef to_args(sig: ObjSignature, _: Any):\nsig.params[\"numerator\"].cli_kind = CliParamKind.ARGUMENT\nsig.params[\"denominator\"].cli_kind = CliParamKind.ARGUMENT\nreturn sig\nif __name__ == \"__main__\":\nrun(fraction, config=config)\n</code></pre>"},{"location":"examples/dataclasses/#with-custom-converter","title":"With custom converter","text":"<p>Using custom converter</p> HelpCode <pre><code>&gt; python examples/dataclasses/custom_converter.py --help\nUsage: examples/dataclasses/custom_converter.py [OPTIONS]\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --x     Fraction                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>from functools import partial\nfrom attrs import mutable\nfrom thermite import BasicCLIArgConverter, Config, run\n@mutable\nclass Fraction:\nnumerator: int\ndenominator: int\ndef fraction_convert(x: str):\nreturn Fraction(int(x.split(\"/\")[0]), int(x.split(\"/\")[1]))\nconfig = Config()\nconfig.cli_args_store.add_converter_factory(\npartial(\nBasicCLIArgConverter.factory,\nsupported_type=Fraction,\nconv_func=fraction_convert,\n),\n11,\n)\ndef fraction(x: Fraction):\nprint(f\"{x.numerator}/{x.denominator} = {x.numerator/x.denominator}\")\nif __name__ == \"__main__\":\nrun(fraction, config=config)\n</code></pre>"},{"location":"examples/lists/","title":"Adapting how Lists are handled","text":""},{"location":"examples/lists/#default","title":"Default","text":"<p>With lists we have a number of different ways on how to deal with them.</p> <p>The basic version is that lists with options are used by specifying the option multiple times. For this behaviour nothing special needs to be done.</p> <p>Basic version for options with List type</p> HelpOutputCode <pre><code>&gt; python examples/lists/default.py --help\nUsage: examples/lists/default.py [OPTIONS]\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --x     int*                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>&gt; python examples/lists/default.py --x 1 --x 2\nx: [1, 2]\n</code></pre> <pre><code>\"\"\"\nVery simple example of a CLI with a list\n\"\"\"\nfrom typing import List\nfrom thermite import Config, run\ndef simple(x: List[int]):\nprint(f\"x: {x}\")\nif __name__ == \"__main__\":\nconfig = Config()\nrun(simple, config=config)\n</code></pre>"},{"location":"examples/lists/#passing-multiple-arguments-for-a-single-call-to-option","title":"Passing multiple arguments for a single call to option","text":"<p>We can also set it up so that we can pass multiple values to the  list for a single call to the option.</p> <p>Single option with variable length arguments</p> HelpOutputCode <pre><code>&gt; python examples/lists/var_length_list_opt.py --help\nUsage: examples/lists/var_length_list_opt.py [OPTIONS]\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --x     List[int]                                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>&gt; python examples/lists/var_length_list_opt.py --x 1 2 3\nx: [1, 2, 3]\n</code></pre> <pre><code>\"\"\"\nVery simple example of a CLI with a list\nand variable number of values for the option\n\"\"\"\nfrom typing import List\nfrom thermite import Config, Event, Option, ParameterGroup, run\ndef simple(x: List[int]):\nprint(f\"x: {x}\")\ndef pg_multi_opt(pg: ParameterGroup) -&gt; ParameterGroup:\npg[\"x\"].processors[0] = pg[\"x\"].processors[0].to_convert_trigger_processor()\nreturn pg\nif __name__ == \"__main__\":\nconfig = Config()\nconfig.event_cb_deco(Event.PG_POST_CREATE, simple)(pg_multi_opt)\nrun(simple, config=config)\n</code></pre>"},{"location":"examples/lists/#multiple-lists-as-arguments-with-no-op-separator","title":"Multiple lists as arguments with no-op separator","text":"<p>in this library even multiple variable length arguments are possible, we just have to seperate them with a no-op option. </p> <p>multiple lists with variable arguments</p> helpoutputcode <pre><code>&gt; python examples/lists/multiple_args.py --help\nUsage: examples/lists/multiple_args.py ARGS\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --0        Works as a delimiter; no other operation                        \u2502\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   x     List[int]                                                            \u2502\n\u2502   y     List[int]                                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>&gt; python examples/lists/multiple_args.py 1 2 3 --0 4 5\nx: [1, 2, 3]\ny: [4, 5]\n</code></pre> <pre><code>\"\"\"\nVery simple example of a CLI with multiple lists as arguments\n\"\"\"\nfrom typing import Any, List\nfrom thermite import CliParamKind, Config, Event, ObjSignature, run\nfrom thermite.callbacks import noop_callback\ndef simple(x: List[int], y: List[int]):\nprint(f\"x: {x}\")\nprint(f\"y: {y}\")\ndef opt_to_arg(sig: ObjSignature, _: Any):\nsig.params[\"x\"].cli_kind = CliParamKind.ARGUMENT\nsig.params[\"y\"].cli_kind = CliParamKind.ARGUMENT\nreturn sig\nif __name__ == \"__main__\":\nconfig = Config()\nconfig.event_cb_deco(Event.SIG_EXTRACT, simple)(opt_to_arg)\nconfig.add_cli_callback(noop_callback)\nrun(simple, config=config)\n</code></pre>"},{"location":"examples/lists/#setting-an-empty-list-if-it-is-not-the-default","title":"Setting an empty list (if it is not the default)","text":"<p>We can also set a trigger that sets a parameter to an empty list.</p> <p>Trigger for empty list</p> codehelpoutput <pre><code>\"\"\"\nVery simple example of a CLI with empty list\n\"\"\"\nfrom typing import List\nfrom thermite import (\nConfig,\nConstantTriggerProcessor,\nEvent,\nOption,\nParameterGroup,\nrun,\n)\ndef simple(x: List[int], y: List[int]):\nprint(f\"x: {x}\")\nprint(f\"y: {y}\")\ndef pg_empty_list(pg: ParameterGroup):\nassert isinstance(pg.params[\"x\"], Option)\npg.params[\"x\"].processors.append(\nConstantTriggerProcessor(triggers=[\"--x-empty\"], res_type=[], constant=[])\n)\nreturn pg\nif __name__ == \"__main__\":\nconfig = Config()\nconfig.event_cb_deco(Event.PG_POST_CREATE, simple)(pg_empty_list)\nrun(simple, config=config)\n</code></pre> <pre><code>&gt; python examples/lists/empty_list.py --help\nUsage: examples/lists/empty_list.py [OPTIONS]\n\n\u256d\u2500 Eager Callbacks \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --help     Display the help message                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   --x           int*                                                         \u2502\n\u2502   --x-empty     []                                                           \u2502\n\u2502   --y           int*                                                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>&gt; python examples/lists/empty_list.py --x-empty --y 4 --y 5\nx: []\ny: [4, 5]\n</code></pre> <p>Show lists with:</p> <ul> <li>an option to specify an empty list</li> </ul>"}]}